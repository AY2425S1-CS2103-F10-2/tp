package seedu.address.model.person;

import static java.util.Objects.requireNonNull;
import static seedu.address.commons.util.AppUtil.checkArgument;



/**
 * Represents a Person's last visited date by the social worker in the address book.
 * Guarantees: immutable; is valid as declared in {@link #isValidDateOfLastVisit(String)}
 */
public class DateOfLastVisit implements Comparable<DateOfLastVisit> {

    public static final String MESSAGE_CONSTRAINTS = "Date of last visit should be in dd-MM-yyyy format.";

    // THIS VALIDATION REGEX WAS GENERATED BY CHATGPT - ACKNOWLEDGE IN DG
    // date must be in the format dd-MM-yyyy
    public static final String VALIDATION_REGEX =
            "^((0[1-9]|[12][0-9]|3[01])-(01|03|05|07|08|10|12)-\\d{4})|"
                    + "((0[1-9]|[12][0-9]|30)-(04|06|09|11)-\\d{4})|"
                    + "((0[1-9]|1[0-9]|2[0-8])-02-\\d{4})|"
                    + "(29-02-(?:(?:[0-9]{2}(?:0[48]|[2468][048]|[13579][26]))|(?:[0-9]{2}00)))$";
    // 31st day of months with 31 days
    // 30th day of months with 30 days
    // 01-29 for February (ignores leap year handling)
    // Days 01-31 for other months
    // -------------------

    public final String value;

    private final String[] dayMonthYear;

    /**
     * Constructs a {@code DateOfLastVisit}.
     *
     * @param date A valid date.
     */
    public DateOfLastVisit(String date) {
        requireNonNull(date);
        checkArgument(isValidDateOfLastVisit(date), MESSAGE_CONSTRAINTS);
        value = date;
        String[] init = {date.substring(0, 2), date.substring(3, 5), date.substring(6)};
        this.dayMonthYear = init;
    }

    /**
     * Returns true if a given string is a valid date of last visit.
     */
    public static boolean isValidDateOfLastVisit(String test) {
        return test.matches(VALIDATION_REGEX);
    }

    /**
     * Compares two dates of last visit by year then month then day to find
     * the right order.
     *
     * @param other the date to be compared to.
     * @return an integer which specifies which date is earlier or if they are equal.
     */
    @Override
    public int compareTo(DateOfLastVisit other) {
        int yearComparison = this.dayMonthYear[2].compareTo(other.dayMonthYear[2]);
        if (yearComparison == 0) {
            int monthComparsion = this.dayMonthYear[1].compareTo(other.dayMonthYear[1]);
            if (monthComparsion == 0) {
                return this.dayMonthYear[0].compareTo(other.dayMonthYear[0]);
            } else {
                return monthComparsion;
            }
        } else {
            return yearComparison;
        }
    }

    @Override
    public String toString() {
        return value;
    }

    @Override
    public boolean equals(Object other) {
        if (other == this) {
            return true;
        }

        // instanceof handles nulls
        if (!(other instanceof DateOfLastVisit)) {
            return false;
        }

        DateOfLastVisit otherDateOfLastVisit = (DateOfLastVisit) other;
        return value.equals(otherDateOfLastVisit.value);
    }

    @Override
    public int hashCode() {
        return value.hashCode();
    }

}
